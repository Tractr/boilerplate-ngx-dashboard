import {Component, Input, OnInit<<if Fields searchable and (string or number)>>, OnDestroy<<endif>>} from '@angular/core';
import {<<Model pascal>>SearchParams} from '../<<Model kebab>>-search-params';
<<if Fields searchable and (string or number)>>
import {Subscription as RxJsSubscription} from 'rxjs/Subscription';
import {Subject as RxJsSubject} from 'rxjs/Subject';
import {debounceTime} from 'rxjs/operators';
<<endif>>
<<if root.d.s>>
import {<<Model pascal>>} from '../<<Model kebab>>';
import {<<Model pascal>>Service} from '../<<Model kebab>>.service';
<<endif>>
 
@Component({
  selector: 'hpf-<<Model kebab>>-filters',
  templateUrl: './<<Model kebab>>-filters.component.html'
})
export class <<Model pascal>>FiltersComponent implements OnInit<<if Fields searchable and (string or number)>>, OnDestroy<<endif>> {
 
  /** @type {<<Model pascal>>SearchParams} The filters */
  @Input() searchParams: <<Model pascal>>SearchParams = new <<Model pascal>>SearchParams();
<<if Fields searchable and (string or number)>>
  /** @type {number} The debuonce delay before calling the API for filtering */
  @Input() filterDebounceTime = 300;
  /** @type {RxJsSubject<void>} Subject for debounced keyup event */
  private keyupSubject = new RxJsSubject<void>();
  /** @type {RxJsSubscription} Subscription of the component */
  private subscription: RxJsSubscription;
<<endif>>
  /** @type {boolean} Denotes if the page number should be set to 0 when filters change */
  @Input() resetPage = false;
 
  /** Constructor */
  constructor() {}
 
  /** Init */
  ngOnInit() {
<<if Fields searchable and (string or number)>>
    // Subscription
    this.subscription = this.keyupSubject
      .pipe(debounceTime(this.filterDebounceTime))
      .subscribe(() => { this.onChange(); });
<<endif>>
  }

<<if Fields searchable and (string or number)>>
  /** Destroy */
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
  /** Called when a keyboard input is changed */
  onChangeDebounced() {
    this.keyupSubject.next();
  }
<<endif>>

  /** Called when an input is changed */
  onChange() {
    if (this.resetPage) {
        this.searchParams.props._page = 0;
    }
    this.searchParams.next();
  }
}
