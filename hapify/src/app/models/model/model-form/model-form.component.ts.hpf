import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';
import {FormBuilder, FormGroup, FormControl, Validators} from '@angular/forms';
import {ErrorService} from '@app/services';
<<if Fields richText and not internal>>
import {TinyMceConfig} from '@app/shared';
<<endif>>
<<# Includes toJSON helpers for Objects >>
<<if Fields object and not internal>>
import {Helpers} from '@app/shared';
<<endif>>
import {<<Model pascal>><<if root.d.s>>, <<Model pascal>>Interface<<endif>>} from '../<<Model kebab>>';
import {<<Model pascal>>Service} from '../<<Model kebab>>.service';

@Component({
  selector: 'hpf-<<Model kebab>>-form',
  templateUrl: './<<Model kebab>>-form.component.html'
})
export class <<Model pascal>>FormComponent implements OnInit {

  /** The <<Model lower>> to inject in the form */
  @Input() <<Model camel>>: <<Model pascal>>;
  /** @type {EventEmitter<<<Model pascal>>>} Called the save button is clicked for a new instance */
  @Output() create = new EventEmitter<<<Model pascal>>>();
  /** @type {EventEmitter<<<Model pascal>>>} Called the save button is clicked for an existing instance */
  @Output() update = new EventEmitter<<<Model pascal>>>();
  /** @type {FormGroup} The form group to use */
  form: FormGroup;
<<if Fields richText and not internal>>
  /** @type {Function<{}>} TinyMCE config */
  tinyMceConfig = TinyMceConfig;
<<endif>>
  /** @type {boolean} Denotes if the form is pending */
  loading = false;

  /**
   * Constructor
   * @param {FormBuilder} formBuilder
   * @param {ErrorService} errorService
   * @param {<<Model pascal>>Service} <<Model camel>>Service
   */
  constructor(private formBuilder: FormBuilder,
              private errorService: ErrorService,
              private <<Model camel>>Service: <<Model pascal>>Service) {
  }

  /** Init */
  ngOnInit() {
    // If no instance, create a new one
    if (!this.<<Model camel>>) {
      this.<<Model camel>> = new <<Model pascal>>();
    }
    // Form validator
<<if Fields hidden and not nullable and not internal>>
    const privateRequired = this.<<Model camel>>.isNew() ? [Validators.required] : [];
<<endif>>
    this.form = this.formBuilder.group({
<<for Fields not internal f>>
    <<if f hidden and not nullable>>
      <<f snake>>: new FormControl(<<if f object>>Helpers.toJSON(<<endif>>this.<<Model camel>>.props.<<f snake>><<if f object>>)<<endif>>, [<<=validator(f, false)>>].concat(privateRequired)),
    <<else>>
      <<f snake>>: new FormControl(<<if f object>>Helpers.toJSON(<<endif>>this.<<Model camel>>.props.<<f snake>><<if f object>>)<<endif>>, [<<=validator(f, true)>>]),
    <<endif>>
<<endfor>>
    });
  }
  /** Called on form submit */
  async onSubmit(): Promise<void> {

    // Loading flag
    this.loading = true;

    try {
        // Update model
        this.updateModel();

    // Creation or update ?
    if (this.<<Model camel>>.isNew()) {
      // Creation
          const <<Model camel>>: <<Model pascal>> = await this.<<Model camel>>Service.create(this.<<Model camel>>.toPayload());
          this.create.next(<<Model camel>>);
    } else {
      // Update
          await this.<<Model camel>>Service.update(this.<<Model camel>>.getId(), this.<<Model camel>>.toPayload());
          this.update.next(this.<<Model camel>>);
    }

    } catch (error) {
        this.errorService.handle(error);
    }

    // Loading flag
    this.loading = false
  }
  /** Update models properties from inputs values */
  private updateModel(): void {
    for (const key of Object.keys(this.form.controls)) {
        this.<<Model camel>>.props[key] = this.form.get(key).value;
    }
<<# Transform JSON to objects >>
<<for Fields object and not internal f>>
    if (typeof this.<<Model camel>>.props.<<f snake>> === 'string') {
        this.<<Model camel>>.props.<<f snake>> = this.<<Model camel>>.props.<<f snake>> ?
            JSON.parse(this.<<Model camel>>.props.<<f snake>>) : <<if f multiple>>[]<<else>>null<<endif>>;
    }
<<endfor>>
  }

}

<<<
function validator(f, required) {
    out = '';

    if (f.type === 'number') {
        if (f.subtype === 'latitude') out = 'Validators.min(-90), Validators.max(90)';
        else if (f.subtype === 'longitude') out = 'Validators.min(-180), Validators.max(180)';
    }
    else if (f.type === 'string') {
        if (f.subtype === 'email') out = 'Validators.email';
        else if (f.subtype === 'password') out = 'Validators.minLength(6)';
    }

    if (!f.nullable && required) {
        out = out.length ? `${out}, Validators.required` : 'Validators.required';
    }

    return out;
}
>>>
