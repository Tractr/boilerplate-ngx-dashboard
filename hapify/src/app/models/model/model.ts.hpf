import {Helpers} from '@app/shared';
import {BaseModel, BaseModelInterface} from '@app/abstracts';
<<for Dependencies not (hidden and internal) d>>
import {<<d pascal>>, <<d pascal>>Interface} from '../<<d kebab>>/<<d kebab>>';
<<endfor>>

export interface <<Model pascal>>Interface extends BaseModelInterface {
<<for Fields not (hidden and internal) and not primary f>>
  <<f snake>>?: <<=type(f)>>;
<<endfor>>
}

export class <<Model pascal>> extends BaseModel< <<Model pascal>>Interface> {

  /** @return {string} Short function to get label of instance */
  getLabel(): string {
<<if Fields label>>
    return `<<=labels()>>`;
<<else>>
    return this.props.<<PrimaryField snake>>;
<<endif>>
  }
<<for Fields entity r>>
  /** @return {boolean} Denotes if the instance of <<r lower>> has been populated */
  <<r camel>>Exists(): boolean {
    <<if r multiple>>
    return !!this.props &&
        this.props.<<r snake>> instanceof Array &&
        (< <<r.m pascal>>[]>this.props.<<r snake>>).every((item) => {
            return item instanceof <<r.m pascal>> && item.exists();
        });
    <<else>>
    return !!this.props &&
        this.props.<<r snake>> instanceof <<r.m pascal>> &&
        this.props.<<r snake>>.exists();
    <<endif>>
  }
<<endfor>>

  /**
   * Populate the current instance from an object
   * @param {<<Model pascal>>Interface} object
   */
  fromObject(object: <<Model pascal>>Interface): void {
    this.props = Object.assign({}, object);
<<for Fields datetime f>>
    <<if f nullable>>
    if (this.props.<<f snake>> !== null) {
    <<endif>>
        this.props.<<f snake>> = Helpers.convertToDate(this.props.<<f snake>>);
    <<if f nullable>>
    }
    <<endif>>
<<endfor>>

<<for Fields entity r>>
    <<if r multiple>>
    if (this.props.<<r snake>> instanceof Array) {
        this.props.<<r snake>> = (< <<r.m pascal>>Interface[]>this.props.<<r snake>>).map((item) => {
            return typeof item === 'object' ? new <<r.m pascal>>(item) : item;
        });
    }
    <<else>>
    if (<<if r nullable>>this.props.<<r snake>> !== null && <<endif>>typeof this.props.<<r snake>> === 'object') {
        this.props.<<r snake>> = new <<r.m pascal>>(< <<r.m pascal>>Interface>this.props.<<r snake>>);
    }
    <<endif>>
<<endfor>>
  }

  /**
   * Convert the current instance to an object
   * @return {<<Model pascal>>Interface}
   */
  toObject(): <<Model pascal>>Interface {
    const props = Object.assign({}, this.props);
<<for Fields nullable and not hidden f>>
    <<if f string>>
    if (typeof props.<<f snake>> !== 'string' || props.<<f snake>>.length === 0) {
        props.<<f snake>> = null;
    }
    <<else>>
    if (typeof props.<<f snake>> === 'undefined') {
        props.<<f snake>> = <<if f multiple>>[]<<else>>null<<endif>>;
    }
    <<endif>>
<<endfor>>

<<for Fields datetime f>>
    <<if f nullable>>
    if (props.<<f snake>> !== null) {
    <<endif>>
        props.<<f snake>> = Helpers.convertToTimestamp(props.<<f snake>>);
    <<if f nullable>>
    }
    <<endif>>
<<endfor>>

<<for Fields entity r>>
    <<if r multiple>>
    if (this.props.<<r snake>> instanceof Array) {
        props.<<r snake>> = (< <<r.m pascal>>[]>props.<<r snake>>).map((item) => {
            return item instanceof <<r.m pascal>> ? item.toObject() : item;
        });
    }
    <<else>>
    if (<<if r nullable>>props.<<r snake>> !== null && <<endif>>props.<<r snake>> instanceof <<r.m pascal>>) {
        props.<<r snake>> = props.<<r snake>>.toObject();
    }
    <<endif>>
<<endfor>>
    return props;
  }

  /**
   * Convert an instance to an object to be sent to the API
   * @return {<<Model pascal>>Interface}
   */
  toPayload(): <<Model pascal>>Interface {
    const raw = this.toObject();
    const allowed = this.allowedKeys();

<<# Remove public data that cannot be sent to the API >>
    const payload = Object.keys(raw)
      .filter(key => allowed.includes(key))
      .reduce((o, k) => { o[k] = raw[k]; return o; }, {} as <<Model pascal>>Interface);

<<# Remove private data that have been entered >>
<<for Fields hidden and not internal and not nullable f>>
    if (payload.<<f snake>> === null) { delete payload.<<f snake>>; }
<<endfor>>

<<# Convert dates and entities >>
<<for Fields not internal and (datetime or entity) f>>
    <<if f datetime>>
    payload.<<f snake>> = < number>payload.<<f snake>>;
    <<elseif f entity>>
        <<if f multiple>>
    payload.<<f snake>> = payload.<<f snake>> ? (< <<f.m pascal>>Interface[]>payload.<<f snake>>).map((i) => i.<<f.m.f.primary snake>>) : null;
        <<else>>
    payload.<<f snake>> = payload.<<f snake>> ? (< <<f.m pascal>>Interface>payload.<<f snake>>).<<f.m.f.primary snake>> : null;
        <<endif>>
    <<endif>>
<<endfor>>
    return payload;
  }

  /**
   * List allowed keys to be sent to the API
   * @return {string[]}
   */
  protected allowedKeys(): string[] {
  	return [
<<for Fields not internal f>>
      '<<f snake>>',
<<endfor>>
  	];
  }
}

<<<
function type(f) {
  let out = "";

  if (f.type === "boolean") out += "boolean";
  else if (f.type === "string") out += "string";
  else if (f.type === "number") out += "number";
  else if (f.type === "datetime") out += "number | Date";
  else if (f.type === "entity") {
    const m = f.multiple ? "[]" : "";
    out += `string${m} | ${f.m.names.pascal}${m} | ${f.m.names.pascal}Interface${m}`;
  }
  else out += "any";

  if (f.nullable && !f.multiple) out += " | null";

  return out;
}
function labels() {
    return root.f.lb
        .map(lb => "${this.props."+lb.names.snake+"}")
        .join(' ');
}
>>>
