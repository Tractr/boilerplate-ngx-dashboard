import {Component, OnDestroy, OnInit} from '@angular/core';
import {ActivatedRoute} from '@angular/router';
import {Router} from '@angular/router';
import {Subscription as RxJsSubscription} from 'rxjs/Subscription';
import {ErrorService} from '@app/services';
import {<<Model pascal>>} from '../../<<Model kebab>>';
import {<<Model pascal>>Service} from '../../<<Model kebab>>.service';

@Component({
  selector: 'hpf-<<Model kebab>>-edit',
  templateUrl: './<<Model kebab>>-edit.component.html'
})
export class <<Model pascal>>EditComponent implements OnInit, OnDestroy {

  /** @type {<<Model pascal>>} The <<Model lower>> */
  <<Model camel>>: <<Model pascal>>;
  /** @type {RxJsSubscription} The id subscription */
  private idSubscription: RxJsSubscription;

  /**
   * Constructor
   * @param {ActivatedRoute} route
   * @param {Router} router
   * @param {ErrorService} errorService
   * @param {<<Model pascal>>Service} <<Model camel>>Service
   */
  constructor(private route: ActivatedRoute,
              private router: Router,
              private errorService: ErrorService,
              private <<Model camel>>Service: <<Model pascal>>Service) {}

  /** Init */
  ngOnInit() {
    // Get the <<Model lower>> after reading the id
    this.idSubscription = this.route.params.subscribe(params => {
      this.<<Model camel>>Service.get(params['id'])
        .then((<<Model camel>>: <<Model pascal>>) => {
          this.<<Model camel>> = <<Model camel>>;
        })
        .catch((error) => this.errorService.handle(error));
    });
  }
  /** Destroy */
  ngOnDestroy() {
    this.idSubscription.unsubscribe();
  }
  /** @param {<<Model pascal>>} <<Model camel>> Called when the <<Model lower>> is saved*/
  onSave(<<Model camel>>: <<Model pascal>>): void {
    this.router.navigateByUrl(`/<<Model kebab>>/${<<Model camel>>.getId()}`);
  }
}
